/* This is an a generic payload parser that can be used as a starting point for Sigfox Devices
** The code find the "data" variable, sent by your sensor, and parse it if exists.
** The content of value from variable "data" is always an Hexadecimal value.
**
** Testing:
** You can do manual tests to the parse by using the Device Emulator. Copy and Paste the following JSON:
** [{ "variable": "data", "value": "0109611395000DF9011EB9" }]
*/

// Search the payload variable in the payload global variable. It's contents is always [ { variable, value...}, {variable, value...} ...]
const payload_raw = payload.find(x => x.variable === 'data');

// check if payload_raw exists
if (payload_raw) {
  try {
    // Convert the data from Hex to Javascript Buffer.
    const buffer = Buffer.from(payload_raw.value, 'hex');

    // Payload (bytes):
    // 0,3 Latitud - formato little endian
    // 4,7 Longitud - formato little endian
    // 8 Temperatura - entero sin signo
    // 9 Bateria - entero sin signo 
    
    // More information about buffers can be found here: https://nodejs.org/api/buffer.html

    // Latitude value
    let lat = buffer.readFloatLE(0);

    // Longitude value
    let lng = buffer.readFloatLE(4);
    let temp = buffer.readInt8(8);
    let bat = buffer.readInt8(9);


    const data = [
      { variable: 'temperatura',  value: temp, unit: 'Â°C' },
      { variable: 'bateria',  value: bat, unit: '%' },
      { variable: 'location',  value: `${lat}, ${lng}`, location: { lat, lng } },
    ];

    // This will concat the content sent by your device with the content generated in this payload parser.
    // It also add the field "serie" and "time" to it, copying from your sensor data.
    payload = payload.concat(data.map(x => ({ ...x, serie: payload_raw.serie, time: payload_raw.time })));
  } catch (e) {
    // Print the error to the Live Inspector.
    console.error(e);

    // Return the variable parse_error for debugging.
    payload = [{ variable: 'parse_error', value: e.message }];
  }
}
